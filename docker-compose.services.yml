##
# DOCUMENTATION:
#
# Docker Compose for providing services of the caching,
# messaging, database and database manager.
#
# @Fonts:
#   https://redis.io/docs/
#   https://joeferner.github.io/redis-commander/
#   https://www.npmjs.com/package/redis-commander
#   https://www.rabbitmq.com/documentation.html
#   https://www.postgresql.org/docs/
#   https://www.pgadmin.org/docs/
#
# @example:
#   Validate and preview the compose file:
#   $ docker-compose --file ./docker-compose.services.yml config;
#
#   Create or rebuild services and build images in parallel:
#   $ docker-compose --file ./docker-compose.services.yml build --parallel;
#
#   Create or rebuild services in detached mode:
#   $ docker-compose --file ./docker-compose.services.yml up --detach;
#
#   Lists all Compose containers:
#   $ docker-compose --file ./docker-compose.services.yml ps;
#
#   To destroy all services, network, volumes and images:
#   $ docker-compose --file ./docker-compose.services.yml down;
#   $ docker-compose --file ./docker-compose.services.yml rm -f;

# Compose and Docker compatibility matrix.
# Compose file format: 3.8
# Docker Engine release: 19.03.0+
version: "3.8"

# Defining swarm volumes with the DRIVER(local).
volumes:
  vol_redis_data:
  vol_rabbitmq_data:
  vol_postgres_data:

# Defining a local network with the DRIVER(bridge).
networks:
  network_local:
    external: false

# Defining container services for Compose.
services:

  # Caching service using Redis:
  cache_redis_server:
    image: redis:6.0.5
    container_name: redis_server
    environment:
      REDIS_REPLICATION_MODE: "master"
      REDIS_DISABLE_COMMANDS: "FLUSHDB,FLUSHALL,CONFIG"
      REDIS_PORT_NUMBER: 6379
      REDIS_PASSWORD: 'P@ssw0rd!'
    command: [
      "redis-server", "/usr/local/etc/redis/redis.conf", "--loglevel", "warning"
    ]
    ports:
      - "6379:6379"
    networks:
      - network_local
    volumes:
      - "./files/services/redis/redis-custom.conf:/usr/local/etc/redis/redis.conf"
      # - "vol_redis_data:/data"
    restart: on-failure

  # Web application service used to view, edit and manage a Redis database:
  # Font: https://joeferner.github.io/redis-commander/
  # UI Web: http://localhost:8081
  cache_redis_webapp:
    image: rediscommander/redis-commander:latest
    container_name: redis_webapp
    depends_on:
      - cache_redis_server
    environment:
      REDIS_HOSTS: "local:cache_redis_server:6379:0:P@ssw0rd!"
      ADDRESS: 0.0.0.0
      HTTP_USER: admin
      HTTP_PASSWORD: 'P@ssw0rd!'
    ports:
      - "8081:8081"
    networks:
      - network_local
    restart: on-failure

  # Messaging service using RabbitMQ:
  # UI Web: http://localhost:8082
  message_rabbitmq_server:
    image: rabbitmq:3.11-management
    container_name: rabbitmq_server
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 'P@ssw0rd!'
    ports:
      - "5672:5672" # AMQP protocol port
      - "8082:15672" # HTTP management UI
    networks:
      - network_local
    volumes:
      - "./files/services/rabbitmq/rabbitmq-3.11.conf:/etc/rabbitmq/rabbitmq.conf"
      # - "vol_rabbitmq_data:/var/lib/rabbitmq"
    restart: on-failure

  # Database service using PostgreSQL:
  database_postgres_server:
    image: postgres:13.3
    container_name: postgres_server
    user: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 'P@ssw0rd!'
      PGDATA: "/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    networks:
      - network_local
    volumes:
      - "./files/services/postgresql/sql-scripts:/docker-entrypoint-initdb.d"
      # - "vol_postgres_data:/var/lib/postgresql/data"
    restart: on-failure
    # The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working.
    healthcheck:
      test: [
        "CMD", "pg_isready",
        "-t", "1",
        "-h", "0.0.0.0",
        "-p", "5432"
      ]
      interval: 5s
      timeout: 2s
      retries: 8
      start_period: 18s

  # pgAdmin a database management service for PostgreSQL:
  # UI Web: http://localhost:8083
  database_pgadmin_server:
    image: dpage/pgadmin4:7.4
    container_name: pgadmin_server
    depends_on:
      - database_postgres_server
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@email.com
      PGADMIN_DEFAULT_PASSWORD: 'P@ssw0rd!'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8083:80"
    networks:
      - network_local
    volumes:
      - "./files/services/pgadmin4/servers.json:/pgadmin4/servers.json"
    restart: on-failure
